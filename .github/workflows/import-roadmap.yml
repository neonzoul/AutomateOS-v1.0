name: Import Roadmap from CSV

on:
    workflow_dispatch:

jobs:
    import-roadmap:
        runs-on: ubuntu-latest
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            - uses: actions/checkout@v4

            - name: Install Python requests
              run: python -m pip install --upgrade pip requests

            - name: Create issues from CSV file
              run: |
                  python - <<'PY'
                  import os, csv, json, sys
                  try:
                      import requests
                  except Exception as e:
                      print('requests not available:', e)
                      sys.exit(1)

                  token = os.environ.get('GITHUB_TOKEN')
                  repo = os.environ.get('GITHUB_REPOSITORY')
                  path = '.github/workflows/automateos-phase1.csv'
                  if not os.path.exists(path):
                      print(f'File not found at path: {path}')
                      sys.exit(1)

                  issues = []
                  with open(path, newline='', encoding='utf-8') as f:
                      reader = csv.DictReader(f)
                      for row in reader:
                          title = (row.get('Title') or '').strip()
                          if not title:
                              print('Skipping empty title row')
                              continue
                          body = (row.get('Body') or '').strip()
                          labels = [l.strip() for l in (row.get('Labels') or '').split(',') if l.strip()]
                          
                          # Add type and quarter as labels if present
                          issue_type = (row.get('Type') or '').strip()
                          if issue_type:
                              labels.append(issue_type)
                          quarter = (row.get('Quarter') or '').strip()
                          if quarter:
                              labels.append(quarter)
                          
                          issue = {
                              'title': title,
                              'body': body,
                              'labels': labels
                          }
                          issues.append(issue)

                  # Write to JSON file
                  with open('issues.json', 'w', encoding='utf-8') as f:
                      json.dump(issues, f, indent=2)

                  print(f'Generated issues.json with {len(issues)} issues')

                  # Now create issues from JSON
                  url = f'https://api.github.com/repos/{repo}/issues'
                  headers = {
                      'Authorization': f'token {token}',
                      'Accept': 'application/vnd.github.v3+json'
                  }
            - name: Upload issues JSON
              uses: actions/upload-artifact@v4
              with:
                  name: issues-json
                  path: issues.json
